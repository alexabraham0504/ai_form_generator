{"version":3,"file":"index2-DVXZ7AxQ.js","sources":["../../src/script.js","../../src/main.js"],"sourcesContent":["// --- Gemini API Service ---\n// Handles calling Gemini API and returning results.\nexport class GeminiAPIService {\n    constructor(apiKey) {\n        this.apiKey = apiKey;\n        this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent';\n    }\n\n    async makeRequest(prompt) {\n        try {\n            const response = await fetch(`${this.baseUrl}?key=${this.apiKey}`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    contents: [{ parts: [{ text: prompt }] }],\n                    generationConfig: {\n                        temperature: 0.8,\n                        maxOutputTokens: 4096,\n                        topP: 0.95\n                    }\n                })\n            });\n\n            const data = await response.json();\n            console.log(\"🔎 Full Gemini API Response:\", data);\n            \n            if (!data || !Array.isArray(data.candidates) || data.candidates.length === 0) {\n                throw new Error(`No candidates returned. Raw response: ${JSON.stringify(data)}`);\n            }\n            \n            const candidate = data.candidates[0];\n            const parts = candidate?.content?.parts;\n            const text = Array.isArray(parts) && parts[0]?.text ? parts[0].text : '';\n            \n            if (!text.trim()) {\n                throw new Error(\"No valid text found in Gemini API response.\");\n            }\n            \n            return text;\n        } catch (error) {\n            console.error(\"❌ Gemini API Error:\", error);\n            return '';\n        }\n    }\n}\n\n// --- Form Generator ---\n// Encapsulates form (question/response) generation, using GeminiAPIService.\nexport class FormGenerator {\n    constructor() {\n        this.geminiApiKey = window.GEMINI_API_KEY\n            || import.meta?.env?.VITE_GEMINI_API_KEY\n            || process?.env?.GEMINI_API_KEY;\n        this.geminiAPI = new GeminiAPIService(this.geminiApiKey);\n        this.questions = [];\n    }\n\n    // Generate synthetic responses - simple approach like index2.html\n    async generateSyntheticResponses(formData, numResponses, sentimentConfig) {\n        const { positive, neutral, negative } = sentimentConfig;\n        \n        // Build questions list like index2.html does\n        const questions = formData.questions.map((q, i) => {\n            const options = q.options ? ` [Options: ${q.options.join('|')}]` : '';\n            return `Question ${i + 1}: ${q.title}${options}`;\n        }).join('\\n');\n\n        // Simple prompt like index2.html\n        const prompt = `Generate ${numResponses} responses for this survey:\n\n${questions}\n\nMake ${positive}% positive, ${neutral}% neutral, and ${negative}% negative responses.\nFor multiple choice questions, use only the given options.\nFor checkbox questions, pick 1-3 options.\n\nGive realistic answers like a real person would.`;\n\n        // Get response from Gemini and return it exactly as-is\n        return await this.geminiAPI.makeRequest(prompt);\n    }\n\n    // Example method: Generate responses for a question with AI\n    async generateResponsesWithAI(questionTitle, numResponses) {\n        const apiKey = this.geminiApiKey;\n        if (!apiKey || apiKey.length < 20) throw new Error(\"Missing or placeholder API key.\");\n        const prompt = `Generate ${numResponses} human-like answers to the question: \"${questionTitle}\". Respond in plain text, each answer separated by a line break.`;\n        const rawText = await this.geminiAPI.makeRequest(prompt);\n        if (!rawText || !rawText.trim()) throw new Error(\"AI returned empty or invalid response\");\n        const answers = rawText.split('\\n').map(ans => ans.trim()).filter(Boolean).slice(0, numResponses);\n        if (answers.length === 0) throw new Error(\"No valid answers parsed from Gemini API response.\");\n        return answers;\n    }\n\n    // Add question to the form\n    addQuestion(questionText, questionType, options = []) {\n        const question = {\n            text: questionText,\n            type: questionType,\n            options: options\n        };\n        window.questions.push(question);\n        window.updatePreview();\n        \n        // Show create form section if we have questions\n        const createFormSection = document.getElementById('createFormSection');\n        if (createFormSection && window.questions.length > 0) {\n            createFormSection.classList.remove('hidden');\n        }\n    }\n\n    // Generate questions with AI\n    async generateQuestionsWithAI(formTitle, questionCount, questionTypes) {\n        try {\n            const prompt = `Generate ${questionCount} questions for a form titled \"${formTitle}\". \n            \nQuestion types to include: ${questionTypes.join(', ')}.\n\nFor each question, provide:\n1. The question text\n2. The question type\n3. If it's a choice-based question (Multiple Choice, Checkboxes, Dropdown), provide 3-5 realistic options\n\nFormat the response as JSON:\n{\n  \"questions\": [\n    {\n      \"text\": \"Question text here\",\n      \"type\": \"Question type here\",\n      \"options\": [\"option1\", \"option2\", \"option3\"] // only for choice-based questions\n    }\n  ]\n}\n\nMake the questions relevant to the form title and realistic.`;\n\n            const response = await this.geminiAPI.makeRequest(prompt);\n            \n            // Try to parse the response as JSON\n            try {\n                const parsed = JSON.parse(response);\n                if (parsed.questions && Array.isArray(parsed.questions)) {\n                    // Clear existing questions\n                    window.questions = [];\n                    \n                    // Add new questions\n                    parsed.questions.forEach(q => {\n                        this.addQuestion(q.text, q.type, q.options || []);\n                    });\n                    \n                    return true;\n                }\n            } catch (parseError) {\n                console.error('Failed to parse AI response:', response);\n                console.error('Parse error:', parseError);\n            }\n            \n            return false;\n        } catch (error) {\n            console.error('AI Form Generation Error:', error);\n            return false;\n        }\n    }\n\n    // Create Google Form\n    async createGoogleForm() {\n        const title = document.getElementById('formTitle').value.trim();\n        \n        if (!title) {\n            alert('Please enter a form title');\n            return;\n        }\n        \n        if (window.questions.length === 0) {\n            alert('Please add at least one question');\n            return;\n        }\n\n        // Show loading modal\n        const loadingModal = document.getElementById('loadingModal');\n        if (loadingModal) {\n            loadingModal.classList.remove('hidden');\n            loadingModal.classList.add('flex');\n        }\n\n        try {\n            // Prepare form data\n            const formData = {\n                title: title,\n                questions: window.questions.map((q, index) => ({\n                    number: index + 1,\n                    text: q.text,\n                    type: q.type,\n                    options: q.options || []\n                }))\n            };\n\n            // Call Google Apps Script to create the form\n            const scriptUrl = import.meta?.env?.VITE_GOOGLE_APPS_SCRIPT_URL || process?.env?.VITE_GOOGLE_APPS_SCRIPT_URL;\n            \n            if (!scriptUrl) {\n                throw new Error('Google Apps Script URL not configured');\n            }\n\n            const response = await fetch(scriptUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(formData)\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const result = await response.json();\n            \n            if (result.success && result.formUrl) {\n                // Show success modal\n                const successModal = document.getElementById('successModal');\n                const formLink = document.getElementById('formLink');\n                \n                if (successModal && formLink) {\n                    formLink.href = result.formUrl;\n                    successModal.classList.remove('hidden');\n                    successModal.classList.add('flex');\n                }\n            } else {\n                throw new Error(result.error || 'Failed to create form');\n            }\n\n        } catch (error) {\n            console.error('Error creating Google Form:', error);\n            alert('Error creating form: ' + error.message);\n        } finally {\n            // Hide loading modal\n            if (loadingModal) {\n                loadingModal.classList.add('hidden');\n                loadingModal.classList.remove('flex');\n            }\n        }\n    }\n\n    // Clear form\n    clearForm() {\n        window.questions = [];\n        window.updatePreview();\n        \n        // Clear form inputs\n        const formTitle = document.getElementById('formTitle');\n        const questionText = document.getElementById('questionText');\n        const optionsText = document.getElementById('optionsText');\n        const questionType = document.getElementById('questionType');\n        \n        if (formTitle) formTitle.value = '';\n        if (questionText) questionText.value = '';\n        if (optionsText) optionsText.value = '';\n        if (questionType) questionType.value = 'Short Answer';\n        \n        // Hide sections\n        const createFormSection = document.getElementById('createFormSection');\n        if (createFormSection) createFormSection.classList.add('hidden');\n    }\n}\n\n// Make FormGenerator methods globally accessible\nwindow.FormGenerator = FormGenerator;\n","// Main entry point for AI-Powered Form Generator\nimport { FormGenerator } from './script.js';\n\n// Force cache refresh\nconsole.log('Loading fresh code...');\n\n// Global variables that need to be accessible\nwindow.questions = [];\nwindow.currentOptionMethod = 'manual';\nwindow.aiGenerationStep = 1;\nwindow.selectedQuestionCount = 5;\nwindow.selectedQuestionTypes = ['Short Answer', 'Paragraph', 'Multiple Choice', 'Checkboxes', 'Dropdown'];\nwindow.csvQuestions = [];\nwindow.importedQuestions = [];\nwindow.questionCounter = 0;\n\n// Initialize the application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    try {\n        console.log('Initializing FormGenerator...');\n        const formGenerator = new FormGenerator();\n        \n        // Make formGenerator globally accessible\n        window.formGenerator = formGenerator;\n        \n        // Initialize the form functionality\n        initializeFormFunctionality();\n        \n        console.log('FormGenerator initialized successfully');\n    } catch (error) {\n        console.error('Error initializing FormGenerator:', error);\n    }\n});\n\nfunction initializeFormFunctionality() {\n    // Initialize question type change handler\n    const questionTypeSelect = document.getElementById('questionType');\n    if (questionTypeSelect) {\n        questionTypeSelect.addEventListener('change', function() {\n            const type = this.value;\n            const optionsSection = document.getElementById('optionsSection');\n            const paragraphSection = document.getElementById('paragraphSection');\n            \n            if (['Multiple Choice', 'Checkboxes', 'Dropdown'].includes(type)) {\n                optionsSection.classList.remove('hidden');\n                paragraphSection.classList.add('hidden');\n            } else if (type === 'Paragraph') {\n                optionsSection.classList.add('hidden');\n                paragraphSection.classList.remove('hidden');\n            } else {\n                optionsSection.classList.add('hidden');\n                paragraphSection.classList.add('hidden');\n            }\n        });\n    }\n\n    // Initialize CSV file handler\n    const csvFileInput = document.getElementById('csvFile');\n    if (csvFileInput) {\n        csvFileInput.addEventListener('change', function(e) {\n            const file = e.target.files[0];\n            if (file) {\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    const csv = e.target.result;\n                    const options = parseCSV(csv);\n                    const optionsTextArea = document.getElementById('optionsText');\n                    if (optionsTextArea) {\n                        optionsTextArea.value = options.join('\\n');\n                    }\n                };\n                reader.readAsText(file);\n            }\n        });\n    }\n\n    // Set initial option method\n    setOptionMethod('manual');\n    \n    // Initialize drag and drop\n    initDragAndDrop();\n}\n\n// Helper function to parse CSV\nfunction parseCSV(csv) {\n    const lines = csv.trim().split('\\n');\n    return lines.map(line => {\n        const firstComma = line.indexOf(',');\n        return firstComma > -1 ? line.substring(0, firstComma).trim() : line.trim();\n    }).filter(option => option);\n}\n\n// Function to set option method\nfunction setOptionMethod(method) {\n    window.currentOptionMethod = method;\n    const manualBtn = document.getElementById('manualBtn');\n    const csvBtn = document.getElementById('csvBtn');\n    const aiBtn = document.getElementById('aiBtn');\n    const manualOptions = document.getElementById('manualOptions');\n    const csvOptions = document.getElementById('csvOptions');\n    const aiOptions = document.getElementById('aiOptions');\n    \n    if (manualBtn) manualBtn.className = method === 'manual' ? 'flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all btn-glow' : 'flex-1 px-4 py-2 bg-white/20 text-white rounded-lg hover:bg-white/30 transition-all';\n    if (csvBtn) csvBtn.className = method === 'csv' ? 'flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all btn-glow' : 'flex-1 px-4 py-2 bg-white/20 text-white rounded-lg hover:bg-white/30 transition-all';\n    if (aiBtn) aiBtn.className = method === 'ai' ? 'flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all btn-glow' : 'flex-1 px-4 py-2 bg-white/20 text-white rounded-lg hover:bg-white/30 transition-all';\n    \n    if (manualOptions) manualOptions.classList.toggle('hidden', method !== 'manual');\n    if (csvOptions) csvOptions.classList.toggle('hidden', method !== 'csv');\n    if (aiOptions) aiOptions.classList.toggle('hidden', method !== 'ai');\n}\n\n// Function to update questions preview\nfunction updatePreview() {\n    const preview = document.getElementById('questionsPreview');\n    \n    if (!preview) return;\n    \n    if (window.questions.length === 0) {\n        preview.innerHTML = `\n            <div class=\"text-white/70 text-center py-12\">\n                <div class=\"w-16 h-16 bg-white/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <svg class=\"w-8 h-8 text-white/50\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"></path>\n                    </svg>\n                </div>\n                <p class=\"text-lg font-semibold\">No questions added yet</p>\n                <p class=\"text-sm opacity-75\">Add your first question to see the list!</p>\n            </div>\n        `;\n        return;\n    }\n\n    // Simple list of questions with drag functionality\n    const questionsHTML = window.questions.map((q, index) => `\n        <div class=\"question-item bg-white/10 rounded-xl p-4 border border-white/20 hover:border-white/30 transition-all mb-4 relative\" draggable=\"true\">\n            <div class=\"drag-handle absolute top-3 right-12 text-white/60 hover:text-white/80 cursor-move\">\n                <i class=\"fas fa-grip-vertical\"></i>\n            </div>\n            <div class=\"flex justify-between items-start\">\n                <div class=\"flex-1\">\n                    <div class=\"flex items-center mb-2\">\n                        <div class=\"w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mr-3\">\n                            <span class=\"question-number text-white font-bold text-xs\">${index + 1}</span>\n                        </div>\n                        <h4 class=\"text-white font-semibold text-base\">${q.text}</h4>\n                    </div>\n                    <div class=\"flex items-center space-x-3 mb-2\">\n                        <span class=\"px-2 py-1 bg-white/20 text-white rounded-full text-xs font-medium\">${q.type}</span>\n                        ${q.options && q.options.length > 0 ? `<span class=\"text-white/60 text-xs\">${q.options.length} options</span>` : ''}\n                    </div>\n                    ${q.options && q.options.length > 0 ? `\n                        <div class=\"bg-white/5 rounded-lg p-3\">\n                            <p class=\"text-white/70 text-xs font-medium mb-2\">Options:</p>\n                            <div class=\"flex flex-wrap gap-1\">\n                                ${q.options.map(option => `<span class=\"px-2 py-1 bg-white/10 text-white rounded text-xs\">${option}</span>`).join('')}\n                            </div>\n                        </div>\n                    ` : ''}\n                </div>\n                <button onclick=\"removeQuestion(${index})\" class=\"text-red-400 hover:text-red-300 transition-colors ml-2 p-1 hover:bg-red-500/20 rounded-lg\">\n                    <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"></path>\n                    </svg>\n                </button>\n            </div>\n        </div>\n    `).join('');\n\n    preview.innerHTML = questionsHTML;\n}\n\n// Function to remove a question\nfunction removeQuestion(index) {\n    window.questions.splice(index, 1);\n    updatePreview();\n}\n\n// Function to initialize drag and drop\nfunction initDragAndDrop() {\n    const previewContainer = document.getElementById('questionsPreview');\n    \n    if (!previewContainer) return;\n    \n    previewContainer.addEventListener('dragstart', (e) => {\n        if (e.target.classList.contains('question-item')) {\n            e.target.classList.add('dragging');\n            e.dataTransfer.effectAllowed = 'move';\n            e.dataTransfer.setData('text/html', e.target.outerHTML);\n        }\n    });\n\n    previewContainer.addEventListener('dragend', (e) => {\n        if (e.target.classList.contains('question-item')) {\n            e.target.classList.remove('dragging');\n        }\n    });\n\n    previewContainer.addEventListener('dragover', (e) => {\n        e.preventDefault();\n        e.dataTransfer.dropEffect = 'move';\n        \n        const draggingElement = document.querySelector('.dragging');\n        if (!draggingElement) return;\n\n        const afterElement = getDragAfterElement(previewContainer, e.clientY);\n        if (afterElement) {\n            previewContainer.insertBefore(draggingElement, afterElement);\n        } else {\n            previewContainer.appendChild(draggingElement);\n        }\n    });\n\n    previewContainer.addEventListener('drop', (e) => {\n        e.preventDefault();\n        updateQuestionNumbers();\n    });\n}\n\n// Helper function to determine drop position\nfunction getDragAfterElement(container, y) {\n    const draggableElements = [...container.querySelectorAll('.question-item:not(.dragging)')];\n    \n    return draggableElements.reduce((closest, child) => {\n        const box = child.getBoundingClientRect();\n        const offset = y - box.top - box.height / 2;\n        \n        if (offset < 0 && offset > closest.offset) {\n            return { offset: offset, element: child };\n        } else {\n            return closest;\n        }\n    }, { offset: Number.NEGATIVE_INFINITY }).element;\n}\n\n// Update question numbers after drag and drop\nfunction updateQuestionNumbers() {\n    const questionElements = document.querySelectorAll('.question-item');\n    questionElements.forEach((element, index) => {\n        const numberElement = element.querySelector('.question-number');\n        if (numberElement) {\n            numberElement.textContent = index + 1;\n        }\n    });\n}\n\n// Make functions globally accessible\nwindow.setOptionMethod = setOptionMethod;\nwindow.updatePreview = updatePreview;\nwindow.removeQuestion = removeQuestion;\nwindow.initDragAndDrop = initDragAndDrop;\nwindow.updateQuestionNumbers = updateQuestionNumbers; "],"names":["GeminiAPIService","apiKey","prompt","data","candidate","parts","_a","text","_b","error","FormGenerator","_c","formData","numResponses","sentimentConfig","positive","neutral","negative","questions","q","i","options","questionTitle","rawText","answers","ans","questionText","questionType","question","createFormSection","formTitle","questionCount","questionTypes","response","parsed","parseError","title","loadingModal","index","scriptUrl","result","successModal","formLink","optionsText","formGenerator","initializeFormFunctionality","questionTypeSelect","type","optionsSection","paragraphSection","csvFileInput","file","reader","e","csv","parseCSV","optionsTextArea","setOptionMethod","initDragAndDrop","line","firstComma","option","method","manualBtn","csvBtn","aiBtn","manualOptions","csvOptions","aiOptions","updatePreview","preview","questionsHTML","removeQuestion","previewContainer","draggingElement","afterElement","getDragAfterElement","updateQuestionNumbers","container","y","closest","child","box","offset","element","numberElement"],"mappings":"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"}